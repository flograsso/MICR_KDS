=============================================================================
List of generated methods in project: MICR_KDS

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component fsl_clock_manager)
   - clockMan1_CLOCK_SYS_SetOutDiv1 -Sets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_GetOutDiv1 -Gets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_SetOutDiv4 -Sets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_GetOutDiv4 -Gets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_SetOutDiv -Sets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetOutDiv -Gets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetPllFllClockFreq -Get the MCGPLLCLK/MCGFLLCLK/IRC48MCLK clock frequency.
   - clockMan1_CLOCK_SYS_SetPllfllSel -Set PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetPllfllSel -Get PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetFixedFreqClockFreq -Gets the MCGFFCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetInternalRefClockFreq -Get internal reference clock frequency.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kFreq -Gets the external reference 32k clock frequency.
   - clockMan1_CLOCK_SYS_SetExternalRefClock32kSrc -Set the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kSrc -Get the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetOsc0ExternalRefClockFreq -Gets the OSC0ERCLK frequency.
   - clockMan1_CLOCK_SYS_GetRtcFreq -Gets RTC input clock frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutFreq -Gets RTC_CLKOUT frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_SetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_GetCopFreq -Gets the COP clock frequency.
   - clockMan1_CLOCK_SYS_GetLptmrFreq -Gets LPTMRx pre-scaler/glitch filter clock frequency.
   - clockMan1_CLOCK_SYS_GetTpmFreq -Gets TPM clock frequency.
   - clockMan1_CLOCK_SYS_SetTpmSrc -Set the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmSrc -Get the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalFreq -Get the TPM external clock source frequency.
   - clockMan1_CLOCK_SYS_SetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetUsbfsFreq -Gets the clock frequency for USB FS OTG module.
   - clockMan1_CLOCK_SYS_SetUsbfsSrc -Set the selection of the clock source for the USB FS 48 MHz clock.
   - clockMan1_CLOCK_SYS_GetUsbfsSrc -Get the selection of the clock source for the USB FS 48 MHz clock.
   - clockMan1_CLOCK_SYS_GetSpiFreq -Gets the clock frequency for SPI module.
   - clockMan1_CLOCK_SYS_GetI2cFreq -Gets the clock frequency for I2C module.
   - clockMan1_CLOCK_SYS_GetLpsciFreq -Gets the clock frequency for LPSCI module.
   - clockMan1_CLOCK_SYS_SetLpsciSrc -Set the LPSCI clock source selection.
   - clockMan1_CLOCK_SYS_GetLpsciSrc -Get the LPSCI clock source selection.
   - clockMan1_CLOCK_SYS_GetUartFreq -Get the UART clock frequency.
   - clockMan1_CLOCK_SYS_GetAdcAltFreq -Gets ADC alternate clock frequency.
   - clockMan1_CLOCK_SYS_GetGpioFreq -Gets the clock frequency for GPIO module.
   - clockMan1_CLOCK_SYS_GetCmpFreq -Gets the clock frequency for CMP module.
   - clockMan1_CLOCK_SYS_GetPitFreq -Gets the clock frequency for PIT module.
   - clockMan1_CLOCK_SYS_GetFtfFreq -Gets the clock frequency for FTF module. (Flash Memory)
   - clockMan1_CLOCK_SYS_EnableDmaClock -Enable the clock for DMA module.
   - clockMan1_CLOCK_SYS_DisableDmaClock -Disable the clock for DMA module.
   - clockMan1_CLOCK_SYS_GetDmaGateCmd -Get the the clock gate state for DMA module.
   - clockMan1_CLOCK_SYS_EnableDmamuxClock -Enable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_DisableDmamuxClock -Disable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_GetDmamuxGateCmd -Get the the clock gate state for DMAMUX module.
   - clockMan1_CLOCK_SYS_EnablePortClock -Enable the clock for PORT module.
   - clockMan1_CLOCK_SYS_DisablePortClock -Disable the clock for PORT module.
   - clockMan1_CLOCK_SYS_GetPortGateCmd -Get the the clock gate state for PORT module.
   - clockMan1_CLOCK_SYS_EnableFtfClock -Enable the clock for FTF module.
   - clockMan1_CLOCK_SYS_DisableFtfClock -Disable the clock for FTF module.
   - clockMan1_CLOCK_SYS_GetFtfGateCmd -Get the the clock gate state for FTF module.
   - clockMan1_CLOCK_SYS_EnableAdcClock -Enable the clock for ADC module.
   - clockMan1_CLOCK_SYS_DisableAdcClock -Disable the clock for ADC module.
   - clockMan1_CLOCK_SYS_GetAdcGateCmd -Get the the clock gate state for ADC module.
   - clockMan1_CLOCK_SYS_EnableCmpClock -Enable the clock for CMP module.
   - clockMan1_CLOCK_SYS_DisableCmpClock -Disable the clock for CMP module.
   - clockMan1_CLOCK_SYS_GetCmpGateCmd -Get the the clock gate state for CMP module.
   - clockMan1_CLOCK_SYS_EnableDacClock -Enable the clock for DAC module.
   - clockMan1_CLOCK_SYS_DisableDacClock -Disable the clock for DAC module.
   - clockMan1_CLOCK_SYS_GetDacGateCmd -Get the the clock gate state for DAC module.
   - clockMan1_CLOCK_SYS_EnableTpmClock -Enable the clock for TPM module.
   - clockMan1_CLOCK_SYS_DisableTpmClock -Disable the clock for TPM module.
   - clockMan1_CLOCK_SYS_GetTpmGateCmd -Get the the clock gate state for TPM module.
   - clockMan1_CLOCK_SYS_EnablePitClock -Enable the clock for PIT module.
   - clockMan1_CLOCK_SYS_DisablePitClock -Disable the clock for PIT module.
   - clockMan1_CLOCK_SYS_GetPitGateCmd -Get the the clock gate state for PIT module.
   - clockMan1_CLOCK_SYS_EnableLptmrClock -Enable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_DisableLptmrClock -Disable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_GetLptmrGateCmd -Get the the clock gate state for LPTIMER module.
   - clockMan1_CLOCK_SYS_EnableTsiClock -Enable the clock for TSI module.
   - clockMan1_CLOCK_SYS_DisableTsiClock -Disable the clock for TSI module.
   - clockMan1_CLOCK_SYS_GetTsiGateCmd -Get the the clock gate state for TSI module.
   - clockMan1_CLOCK_SYS_EnableRtcClock -Enable the clock for RTC module.
   - clockMan1_CLOCK_SYS_DisableRtcClock -Disable the clock for RTC module.
   - clockMan1_CLOCK_SYS_GetRtcGateCmd -Get the the clock gate state for RTC module.
   - clockMan1_CLOCK_SYS_EnableUsbfsClock -Enable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_DisableUsbfsClock -Disable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_GetUsbfsGateCmd -Get the the clock gate state for USB module.
   - clockMan1_CLOCK_SYS_EnableSpiClock -Enable the clock for SPI module.
   - clockMan1_CLOCK_SYS_DisableSpiClock -Disable the clock for SPI module.
   - clockMan1_CLOCK_SYS_GetSpiGateCmd -Get the the clock gate state for SPI module.
   - clockMan1_CLOCK_SYS_EnableLpsciClock -Enable the clock for LPSCI module.
   - clockMan1_CLOCK_SYS_DisableLpsciClock -Disable the clock for LPSCI module.
   - clockMan1_CLOCK_SYS_GetLpsciGateCmd -Get the the clock gate state for LPSCI module.
   - clockMan1_CLOCK_SYS_EnableUartClock -Enable the clock for UART module.
   - clockMan1_CLOCK_SYS_DisableUartClock -Disable the clock for UART module.
   - clockMan1_CLOCK_SYS_GetUartGateCmd -Get the the clock gate state for UART module.
   - clockMan1_CLOCK_SYS_EnableI2cClock -Enable the clock for I2C module.
   - clockMan1_CLOCK_SYS_DisableI2cClock -Disable the clock for I2C module.
   - clockMan1_CLOCK_SYS_GetI2cGateCmd -Get the the clock gate state for I2C module.
   - clockMan1_CLOCK_SYS_SetUsbExternalFreq -Set the USB external clock frequency(USB_CLKIN).
   - clockMan1_CLOCK_SYS_SetTpmExternalFreq -Set the TPM external clock frequency(TPM_CLKx).
   - clockMan1_CLOCK_SYS_Init -Installs pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Sets the system clock configuration according to a pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Sets the system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Gets the current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Gets the callback which returns an error in the last clock switch.
   - clockMan1_CLOCK_SYS_BootToFee -Sets MCG to FEE mode during startup.
   - clockMan1_CLOCK_SYS_BootToFei -Sets MCG to FEI mode during startup.
   - clockMan1_CLOCK_SYS_BootToBlpi -Sets MCG to BLPI mode during startup.
   - clockMan1_CLOCK_SYS_BootToBlpe -Sets MCG to BLPE mode during startup.
   - clockMan1_CLOCK_SYS_BootToPee -Sets MCG to PEE mode during startup.
   - clockMan1_CLOCK_SYS_SetMcgMode -Sets MCG to a target mode.
   - clockMan1_CLOCK_SYS_SetSimConfigration -Sets the clock configuration in SIM module.
   - clockMan1_CLOCK_SYS_OscInit -Initializes the OSC.
   - clockMan1_CLOCK_SYS_OscDeinit -Deinitializes the OSC.
   - clockMan1_CLOCK_SYS_SetOscerConfigration -Configures the OSCERCLK.
   - clockMan1_CLOCK_SYS_RtcOscInit -Initializes the RTC OSC.
   - clockMan1_CLOCK_SYS_RtcOscDeinit -Deinitializes the RTC OSC.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_SYS_GetCoreClockFreq -Gets the core clock frequency.
   - clockMan1_CLOCK_SYS_GetSystemClockFreq -Gets the system clock frequency.
   - clockMan1_CLOCK_SYS_GetBusClockFreq -Gets the bus clock frequency.
   - clockMan1_CLOCK_SYS_GetFlashClockFreq -Gets the flash clock frequency.
   - clockMan1_CLOCK_SYS_GetLpoClockFreq -Gets the LPO clock frequency.
   - clockMan1_CLOCK_SYS_SetSystickSrc -Sets the Systick clock source SYST_CSR[CLKSOURCE].
   - clockMan1_CLOCK_SYS_GetSystickFreq -Gets the Systick clock frequency.

Module "pin_init"  (component PinSettings)
   - pin_init_hardware_init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.
   - pin_init_init_adc_pins -ADC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                ADC0 peripheral.
   - pin_init_deinit_adc_pins -ADC method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into ADC0 peripheral.
   - pin_init_init_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                GPIOA, GPIOB, GPIOC, GPIOD, GPIOE peripherals.
   - pin_init_deinit_gpio_pins -GPIO method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into GPIOA, GPIOB, 
                GPIOC, GPIOD, GPIOE peripherals.
   - pin_init_init_i2c_pins -I2C method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                I2C0, I2C1 peripherals.
   - pin_init_deinit_i2c_pins -I2C method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into I2C0, I2C1 peripherals.
   - pin_init_init_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_init_deinit_llwu_pins -LLWU method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into LLWU peripheral.
   - pin_init_init_osc_pins -OSC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                OSC0 peripheral.
   - pin_init_deinit_osc_pins -OSC method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into OSC0 peripheral.
   - pin_init_init_rcm_pins -RCM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into RCM 
                peripheral.
   - pin_init_deinit_rcm_pins -RCM method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into RCM peripheral.
   - pin_init_init_rtc_pins -RTC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into RTC 
                peripheral.
   - pin_init_deinit_rtc_pins -RTC method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into RTC peripheral.
   - pin_init_init_sim_pins -SIM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into SIM 
                peripheral.
   - pin_init_deinit_sim_pins -SIM method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into SIM peripheral.
   - pin_init_init_swd_pins -SWD method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into SWD 
                peripheral.
   - pin_init_deinit_swd_pins -SWD method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into SWD peripheral.
   - pin_init_init_tsi_pins -TSI method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TSI0 peripheral.
   - pin_init_deinit_tsi_pins -TSI method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into TSI0 peripheral.
   - pin_init_init_uart_pins -UART method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                UART1, UART2 peripherals.
   - pin_init_deinit_uart_pins -UART method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into UART1, UART2 
                peripherals.
   - pin_init_init_uart0_pins -UART0 method configures registers according to settings  of routing and electrical features. 
                This method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either 
                user selected pins or pins selected in pin items in components. Call this method code to route desired pins 
                into UART0 peripheral.
   - pin_init_deinit_uart0_pins -UART0 method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into UART0 peripheral.

Module "intMan1"   (component fsl_interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.

Module "osa1"      (component fsl_os_abstraction)
   - osa1_OSA_PollAllOtherTasks -Calls all task functions one time except for the current task.
   - osa1_DefaultISR -The default interrupt handler installed in vector table.
   - osa1_OSA_SemaCreate -Creates a semaphore with a given value.
   - osa1_OSA_SemaWait -Pending a semaphore with timeout.
   - osa1_OSA_SemaPost -Signals for someone waiting on the semaphore to wake up.
   - osa1_OSA_SemaDestroy -Destroys a previously created semaphore.
   - osa1_OSA_MutexCreate -Create an unlocked mutex.
   - osa1_OSA_MutexLock -Waits for a mutex and locks it.
   - osa1_OSA_MutexUnlock -Unlocks a previously locked mutex.
   - osa1_OSA_MutexDestroy -Destroys a previously created mutex.
   - osa1_OSA_EventCreate -Initializes an event object with all flags cleared.
   - osa1_OSA_EventWait -Waits for specified event flags to be set.
   - osa1_OSA_EventSet -Sets one or more event flags.
   - osa1_OSA_EventClear -Clears one or more flags.
   - osa1_OSA_EventGetFlags -Gets event flags status.
   - osa1_OSA_EventDestroy -Destroys a previously created event object.
   - osa1_OSA_TaskCreate -Creates a task.
   - osa1_OSA_TaskDestroy -Destroys a previously created task.
   - osa1_OSA_TaskYield -Puts the active task to the end of scheduler's queue.
   - osa1_OSA_TaskGetHandler -Gets the handler of active task.
   - osa1_OSA_TaskGetPriority -Gets the priority of a task.
   - osa1_OSA_TaskSetPriority -Sets the priority of a task.
   - osa1_OSA_MsgQCreate -Initializes a message queue.
   - osa1_OSA_MsgQPut -Puts a message at the end of the queue.
   - osa1_OSA_MsgQGet -Reads and remove a message at the head of the queue.
   - osa1_OSA_MsgQDestroy -Destroys a previously created queue.
   - osa1_OSA_MemAlloc -Reserves the requested amount of memory in bytes.
   - osa1_OSA_MemAllocZero -Reserves the requested amount of memory in bytes and initializes it to 0.
   - osa1_OSA_MemFree -Releases the memory previously reserved.
   - osa1_OSA_TimeDelay -Delays execution for a number of milliseconds.
   - osa1_OSA_TimeGetMsec -Gets the current time since system boot in milliseconds.
   - osa1_OSA_InstallIntHandler -Installs the interrupt handler.
   - osa1_OSA_EnterCritical -Enters the critical section to ensure some code is not preempted.
   - osa1_OSA_ExitCritical -Exits the critical section.
   - osa1_OSA_Init -Initializes the RTOS services.
   - osa1_OSA_Start -Starts the RTOS.

Module "GPIO_0"    (component fsl_gpio)
   - GPIO_0_GPIO_DRV_Init -Initializes all GPIO pins used by the board.
   - GPIO_0_GPIO_DRV_InputPinInit -Initializes one GPIO input pin used by the board.
   - GPIO_0_GPIO_DRV_OutputPinInit -Initializes one GPIO output pin used by the board.
   - GPIO_0_GPIO_DRV_GetPinDir -Gets the current direction of the individual GPIO pin.
   - GPIO_0_GPIO_DRV_SetPinDir -Sets the current direction of the individual GPIO pin.
   - GPIO_0_GPIO_DRV_WritePinOutput -Sets the output level of the individual GPIO pin to the logic 1 or 0.
   - GPIO_0_GPIO_DRV_SetPinOutput -Sets the output level of the individual GPIO pin to the logic 1.
   - GPIO_0_GPIO_DRV_ClearPinOutput -Sets the output level of the individual GPIO pin to the logic 0.
   - GPIO_0_GPIO_DRV_TogglePinOutput -Reverses current output logic of the individual GPIO pin.
   - GPIO_0_GPIO_DRV_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - GPIO_0_GPIO_DRV_IsPinIntPending -Reads the individual pin-interrupt status flag.
   - GPIO_0_GPIO_DRV_ClearPinIntFlag -Clears the individual GPIO pin interrupt status flag.

Module "ADC_0"     (component fsl_adc16)
   - ADC_0_ADC16_DRV_GetAutoCalibrationParam -Gets the calibration parameters by auto calibration.
   - ADC_0_ADC16_DRV_SetCalibrationParam -Sets the calibration parameters.
   - ADC_0_ADC16_DRV_StructInitUserConfigDefault -Fills the initial user configuration by default for a one-time trigger mode.
   - ADC_0_ADC16_DRV_Init -Initializes the ADC module converter.
   - ADC_0_ADC16_DRV_Deinit -De-initializes the ADC module converter.
   - ADC_0_ADC16_DRV_ConfigHwCompare -Configures the hardware compare feature.
   - ADC_0_ADC16_DRV_ConfigHwAverage -Configures the hardware averaging feature.
   - ADC_0_ADC16_DRV_SetChnMux -Switches the channel mux.
   - ADC_0_ADC16_DRV_ConfigConvChn -Configure the conversion channel by software.
   - ADC_0_ADC16_DRV_WaitConvDone -Waits for the latest conversion to be complete.
   - ADC_0_ADC16_DRV_PauseConv -Pauses the current conversion by software.
   - ADC_0_ADC16_DRV_GetConvValueRAW -Gets the latest conversion value with no format.
   - ADC_0_ADC16_DRV_GetConvValueSigned -Gets the latest conversion value with signed.
   - ADC_0_ADC16_DRV_GetConvFlag -Gets the event status of the ADC16 module.
   - ADC_0_ADC16_DRV_GetChnFlag -Gets the event status of each channel group.

Module "LPSCI_0"   (component fsl_lpsci)
   - LPSCI_0_LPSCI_DRV_Init -Initializes an LPSCI instance for operation.
   - LPSCI_0_LPSCI_DRV_Deinit -Shuts down the LPSCI by disabling interrupts and the transmitter/receiver.
   - LPSCI_0_LPSCI_DRV_InstallRxCallback -Installs callback function for the LPSCI receive.
   - LPSCI_0_LPSCI_DRV_InstallTxCallback -Installs callback function for the LPSCI transmit.
   - LPSCI_0_LPSCI_DRV_SendDataBlocking -Sends (transmits) data out through the LPSCI module using a blocking method.
   - LPSCI_0_LPSCI_DRV_SendData -Sends (transmits) data through the LPSCI module using a non-blocking method.
   - LPSCI_0_LPSCI_DRV_GetTransmitStatus -Returns whether the previous LPSCI transmit has finished.
   - LPSCI_0_LPSCI_DRV_AbortSendingData -Terminates an asynchronous LPSCI transmission early.
   - LPSCI_0_LPSCI_DRV_ReceiveDataBlocking -Gets (receives) data from the LPSCI module using a blocking method.
   - LPSCI_0_LPSCI_DRV_ReceiveData -Gets (receives) data from the LPSCI module using a non-blocking method.
   - LPSCI_0_LPSCI_DRV_GetReceiveStatus -Returns whether the previous LPSCI receive is complete.
   - LPSCI_0_LPSCI_DRV_AbortReceivingData -Terminates an asynchronous LPSCI receive early.

Module "UART_1"    (component fsl_uart)
   - UART_1_UART_DRV_Init -Initializes an UART instance for operation.
   - UART_1_UART_DRV_Deinit -Shuts down the UART by disabling interrupts and the transmitter/receiver.
   - UART_1_UART_DRV_InstallRxCallback -Installs the callback function for the UART receive.
   - UART_1_UART_DRV_InstallTxCallback -Installs the callback function for the UART transmit.
   - UART_1_UART_DRV_SendDataBlocking -Sends (transmits) data out through the UART module using a blocking method.
   - UART_1_UART_DRV_SendData -Sends (transmits) data through the UART module using a non-blocking method.
   - UART_1_UART_DRV_GetTransmitStatus -Returns whether the previous UART transmit has finished.
   - UART_1_UART_DRV_AbortSendingData -Terminates an asynchronous UART transmission early.
   - UART_1_UART_DRV_ReceiveDataBlocking -Gets (receives) data from the UART module using a blocking method.
   - UART_1_UART_DRV_ReceiveData -Gets (receives) data from the UART module using a non-blocking method.
   - UART_1_UART_DRV_GetReceiveStatus -Returns whether the previous UART receive is complete.
   - UART_1_UART_DRV_AbortReceivingData -Terminates an asynchronous UART receive early.

Module "LPTMR_0"   (component fsl_lptmr)
   - LPTMR_0_LPTMR_DRV_Init -Initializes the LPTMR driver.
   - LPTMR_0_LPTMR_DRV_Deinit -Deinitializes the LPTMR driver.
   - LPTMR_0_LPTMR_DRV_Start -Starts the LPTMR counter.
   - LPTMR_0_LPTMR_DRV_Stop -Stops the LPTMR counter.
   - LPTMR_0_LPTMR_DRV_SetTimerPeriodUs -Configures the LPTMR timer period in microseconds.
   - LPTMR_0_LPTMR_DRV_GetCurrentTimeUs -Gets the current LPTMR time in microseconds.
   - LPTMR_0_LPTMR_DRV_SetPulsePeriodCount -Sets the pulse period value.
   - LPTMR_0_LPTMR_DRV_GetCurrentPulseCount -Gets the current pulse count.
   - LPTMR_0_LPTMR_DRV_InstallCallback -Installs the user-defined callback in the LPTMR module.
   - LPTMR_0_LPTMR_DRV_IRQHandler -Driver-defined ISR in the LPTMR module.

Module "pwrMan1"   (component fsl_power_manager)
   - pwrMan1_POWER_SYS_Init -Power Manager initialization for operation.
   - pwrMan1_POWER_SYS_Deinit -This function deinitializes the Power Manager.
   - pwrMan1_POWER_SYS_SetMode -This function configures the power mode.
   - pwrMan1_POWER_SYS_GetLastMode -This function returns power mode set as the last one.
   - pwrMan1_POWER_SYS_GetLastModeConfig -This function returns user configuration structure of power mode set as the last one.
   - pwrMan1_POWER_SYS_GetCurrentMode -This function returns the currently running power mode.
   - pwrMan1_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - pwrMan1_POWER_SYS_GetErrorCallback -This function returns the last failed notification callback configuration structure.
   - pwrMan1_POWER_SYS_GetVeryLowPowerModeStatus -This function returns whether very low power mode is running.
   - pwrMan1_POWER_SYS_GetLowLeakageWakeupResetStatus -This function returns whether reset was caused by low leakage wake up.
   - pwrMan1_POWER_SYS_GetAckIsolation -Gets the acknowledge isolation flag.
   - pwrMan1_POWER_SYS_ClearAckIsolation -Clears the acknowledge isolation flag.
   - pwrMan1_POWER_SYS_SetWakeupModule -This function allows to set wake up module in low leakage wake up unit (LLWU). Each of 
                the available wake-up sources can be individually enabled or disabled.
   - pwrMan1_POWER_SYS_GetWakeupModuleFlag -This function allows to get wake up module flag in LLWU.
   - pwrMan1_POWER_SYS_SetWakeupPin -This function allows to set wake up pin in low leakage wake up unit (LLWU) and allows to 
                configure pin electrical parameters if GPIO pin configuration is passed as parameter. Each of the available 
                wake-up sources can be individually enabled or disabled.
   - pwrMan1_POWER_SYS_GetWakeupPinFlag -This function allows to get wake up pin flag in low leakage wake up unit (LLWU).
   - pwrMan1_POWER_SYS_ClearWakeupPinFlag -This function allows to clear wake up pin flag in low leakage wake up unit (LLWU).

Module "gpio1"     (component fsl_gpio)
   - gpio1_GPIO_DRV_Init -Initializes all GPIO pins used by the board.
   - gpio1_GPIO_DRV_InputPinInit -Initializes one GPIO input pin used by the board.
   - gpio1_GPIO_DRV_OutputPinInit -Initializes one GPIO output pin used by the board.
   - gpio1_GPIO_DRV_GetPinDir -Gets the current direction of the individual GPIO pin.
   - gpio1_GPIO_DRV_SetPinDir -Sets the current direction of the individual GPIO pin.
   - gpio1_GPIO_DRV_WritePinOutput -Sets the output level of the individual GPIO pin to the logic 1 or 0.
   - gpio1_GPIO_DRV_SetPinOutput -Sets the output level of the individual GPIO pin to the logic 1.
   - gpio1_GPIO_DRV_ClearPinOutput -Sets the output level of the individual GPIO pin to the logic 0.
   - gpio1_GPIO_DRV_TogglePinOutput -Reverses current output logic of the individual GPIO pin.
   - gpio1_GPIO_DRV_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - gpio1_GPIO_DRV_IsPinIntPending -Reads the individual pin-interrupt status flag.
   - gpio1_GPIO_DRV_ClearPinIntFlag -Clears the individual GPIO pin interrupt status flag.

Module "i2cCom1"   (component fsl_i2c)
   - i2cCom1_I2C_DRV_IRQHandler -Pass IRQ control to either the master or slave driver.
   - i2cCom1_I2C_DRV_MasterInit -Initializes the I2C master mode driver.
   - i2cCom1_I2C_DRV_MasterDeinit -Shuts down the driver.
   - i2cCom1_I2C_DRV_MasterSetBaudRate -Configures the I2C bus to access a device.
   - i2cCom1_I2C_DRV_MasterSendDataBlocking -Performs a blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendData -Performs a non-blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetSendStatus -Gets the current status of the I2C master transmit.
   - i2cCom1_I2C_DRV_MasterAbortSendData -Terminates a non-blocking I2C Master transmission early.
   - i2cCom1_I2C_DRV_MasterReceiveDataBlocking -Performs a blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterReceiveData -Performs a non-blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetReceiveStatus -Gets the current status of the I2C master receive.
   - i2cCom1_I2C_DRV_MasterReceiveDataPolling -Performs a polling receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendDataPolling -Performs a polling send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterIRQHandler -The interrupt handler for I2C master mode.
   - i2cCom1_I2C_DRV_SlaveInit -Initializes the I2C module.
   - i2cCom1_I2C_DRV_SlaveDeinit -Shuts down the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetHandler -Gets the I2C slave run-time state structure.
   - i2cCom1_I2C_DRV_SlaveSendData -Sends/transmits data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveSendDataBlocking -Sends (transmits) data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveData -Receives the data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataBlocking -Receives data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveGetReceiveStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetTransmitStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveAbortReceiveData -Terminates a non-blocking receive of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveAbortSendData -Terminates a non-blocking send of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveIsBusBusy -Gets the current status of the I2C slave bus.
   - i2cCom1_I2C_DRV_SlaveSendDataPolling -Sends out multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataPolling -Receives multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveIRQHandler -The interrupt handler for I2C slave mode.

Module "Cpu"       (component MKL25Z128LK4_4SDK)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.

===================================================================================
